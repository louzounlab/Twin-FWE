import datetime
import secrets
import os
from os.path import join
from flask import Flask, render_template, request, redirect, url_for
import time
import shutil
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
import gc
from scipy.stats import norm

# Set the font
rcParams['font.family'] = 'Times New Roman'
rcParams['font.size'] = 25

# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()

df_original = pd.read_csv(join("static", "data.csv"))


def percentage_below_x(x, mean, std):
    # Calculate the z-score
    z = (x - mean) / std

    # Calculate the percentage using the CDF
    percentage = norm.cdf(z) * 100

    return percentage


def gaussian(x, mean, std):
    return 1 / (std * np.sqrt(2 * np.pi)) * np.exp(-(x - mean) ** 2 / (2 * std ** 2))


def plot_gaussian(mcda, week, weight, save_path, title=""):
    # Get the values
    df = get_values(mcda, week)

    # Mean and standard deviation
    mean, std = df["50"], df["Std"]

    # Generate x values
    x = np.linspace(mean - 3 * std, mean + 3 * std, 100)

    # Compute the corresponding y values using the Gaussian function
    y = [gaussian(x_i, mean, std) for x_i in x]

    # Plot the Gaussian distribution
    fig, ax = plt.subplots(figsize=(15, 12), facecolor='none')
    ax.plot(x, y, color="darkturquoise", linewidth=4)
    ax.set_title(title)
    ax.set_xlabel("Weight")
    ax.set_ylabel("Probability Density")

    # Plot the percentiles bar
    x_values = [float(val) for val in list(df.iloc[0][['5', '10', '50', '90', '95']])]
    try:
        y_values = [gaussian(x_i, mean, std)[0] for x_i in x_values]
    except:
        y_values = [gaussian(x_i, mean, std).iloc[0] for x_i in x_values]

    width = 3 * std / 100
    ax.bar(x_values[2], y_values[2], color='black', width=width)
    ax.bar([x_values[1], x_values[3]], [y_values[1], y_values[3]], color='grey', width=width)
    ax.bar([x_values[0], x_values[4]], [y_values[0], y_values[4]], color='lightgrey', width=width)

    # Plot the weight as a point
    ax.bar(weight, gaussian(weight, mean, std), color='dodgerblue', width=width)
    ax.scatter(weight, gaussian(weight, mean, std), color="dodgerblue", label="Your Weight", s=300)
    ax.legend()

    plt.savefig(save_path)

    # Calculate the percentage below the weight
    percentage = percentage_below_x(weight, mean, std)

    return percentage


def plot_trend(mcda, week, weight, save_path, title="Trend Line"):
    # Find the row of details for each week
    dfs = []

    # Change the week and weight to list format
    week, weight = list(week["week"]), list(weight["weight"])

    for w in week:
        df_w = get_values(mcda=mcda, week=w)
        dfs.append(df_w)
    # Concatenate the dataframes
    df = pd.concat(dfs)

    # Set colors
    colors = ["lightgrey", "grey", "black", "grey", "lightgrey"]
    our_color = "dodgerblue"

    # Set the percentage values
    pers = ['5', '10', '50', '90', '95']

    # Set the figure
    fig, ax = plt.subplots(figsize=(15, 12), facecolor='none')

    # Plot the trend lines
    for i in range(len(colors)):
        ax.plot(week, df[pers[i]], color=colors[i], label=f"{pers[i]}%", linewidth=2)

    # Fill the gap between 5% and 95% with lightgrey
    ax.fill_between(week, df['5'], df['95'], color='lightgrey', alpha=0.5)

    # Fill the gap between 10% and 90% with grey
    ax.fill_between(week, df['10'], df['90'], color='grey', alpha=0.5)

    # Plot the weight
    ax.plot(week, weight, color=our_color, label="Your Weight", linewidth=4)

    # Set the labels
    ax.set_title(title)
    ax.set_xlabel("Week")
    ax.set_ylabel("Weight")
    ax.legend()

    # Save the figure
    plt.savefig(save_path)


def get_values(mcda: int, week: float):
    global df_original
    df = df_original.copy()

    # Narrow down the data
    if mcda == 1:
        df = df[df["MCDA"] == 1]
    else:
        df = df[df["MCDA"] == 0]
    # Get the week
    if week in list(df["Week"]):
        df = df[df["Week"] == week]
    else:
        weeks = list(df["Week"])
        week_below = max([w for w in weeks if w < week])
        week_above = min([w for w in weeks if w > week])

        # Now, week is an average of week_below and week_above
        # and can be represented as a*week_below + b*week_above
        a = (week_above - week) / (week_above - week_below)
        b = (week - week_below) / (week_above - week_below)

        df = a * df[df["Week"] == week_below].to_numpy() + b * df[df["Week"] == week_above].to_numpy()
        df = pd.DataFrame(df, columns=df_original.columns)

    return df


def clean_old_files():
    gc.collect()
    files = os.listdir("static")
    for file in files:
        if os.path.isdir(join("static", file)) and file != "bootstrap":
            # Time is older than an hour
            if time.time() - float(file) > 3600:
                shutil.rmtree(join("static", file))
                print("Deleted:", file)


@app.route('/process_form', methods=['POST', 'GET'])
def process_form():
    clean_old_files()

    # Read the form data
    cda_type = request.form.get('cda_type')
    if cda_type == "None":
        return render_template("index.html", error="Please select a MCDA/DCDA", data=request.form)

    # Set the value of MCDA
    mcda = 1 if cda_type == "MCDA" else 0

    # Get request time
    request_time = str(time.time())
    folder_path = join("static", request_time)
    # Create a folder of this time
    os.mkdir(folder_path)

    # Get the week as number
    twin_1_week = request.form.get('week1')
    twin_2_week = request.form.get('week2')

    # Fix the days
    try:
        twin_1_week = float(twin_1_week)
        days = (float(twin_1_week) - float(int(twin_1_week))) * 10 * (1 / 7)
        twin_1_week = float(int(twin_1_week)) + days
    except:
        pass
    try:
        twin_2_week = float(twin_2_week)
        days = (float(twin_2_week) - float(int(twin_2_week))) * 10 * (1 / 7)
        twin_2_week = float(int(twin_2_week)) + days
    except:
        pass

    # Read the weeks from the form
    weeks_list = [[], []]
    for j in range(0, 1 + 1):
        for i in range(1, 10 + 1):
            weekj_i = request.form.get(f'week{j + 1}_{i}')
            if weekj_i:
                weekj_i = float(weekj_i)
                days = (float(weekj_i) - float(int(weekj_i))) * 10 * (1 / 7)
                weekj_i = float(int(weekj_i)) + days
                weeks_list[j].append(weekj_i)

    # Set up nicely in a dataframe
    week_df_twin_1 = pd.DataFrame({"week": weeks_list[0]})
    week_df_twin_2 = pd.DataFrame({"week": weeks_list[1]})

    # Check there was an input
    if week_df_twin_1.shape[0] == 0 and not twin_1_week:
        return render_template("index.html",
                               error="Please input at least one week for twin 1",
                               data=request.form)
    if week_df_twin_2.shape[0] == 0 and not twin_2_week:
        return render_template("index.html",
                               error="Please input at least one week for twin 2",
                               data=request.form)

    # Check which inputs to use
    if week_df_twin_1.shape[0] > 0:
        week_twin_1 = week_df_twin_1
    else:
        week_twin_1 = float(twin_1_week)
    if week_df_twin_2.shape[0] > 0:
        week_twin_2 = week_df_twin_2
    else:
        week_twin_2 = float(twin_2_week)

    # Get the weight
    twin_1_weight = request.form.get('weight1')
    twin_2_weight = request.form.get('weight2')

    # Read the weeks from the form
    weights_list = [[], []]
    for j in range(0, 1 + 1):
        for i in range(1, 10 + 1):
            weightj_i = request.form.get(f'weight{j + 1}_{i}')
            if weightj_i:
                weights_list[j].append(float(weightj_i))

    # Set up nicely in a dataframe
    weight_df_twin_1 = pd.DataFrame({"weight": weights_list[0]})
    weight_df_twin_2 = pd.DataFrame({"weight": weights_list[1]})

    if weight_df_twin_1.shape[0] == 0 and not twin_1_weight:
        return render_template("index.html",
                               error="Please input at least one weight for twin 1",
                               data=request.form)
    if weight_df_twin_2.shape[0] == 0 and not twin_2_weight:
        return render_template("index.html",
                               error="Please input at least one weight for twin 2",
                               data=request.form)

    # Check which inputs to use
    if weight_df_twin_1.shape[0] > 0:
        weight_twin_1 = weight_df_twin_1
    else:
        weight_twin_1 = float(twin_1_weight)
    if weight_df_twin_2.shape[0] > 0:
        weight_twin_2 = weight_df_twin_2
    else:
        weight_twin_2 = float(twin_2_weight)

    # Check input validity
    if type(week_twin_1) != type(weight_twin_1) or type(week_twin_2) != type(weight_twin_2):
        return render_template("index.html",
                               error="Mismatch between amount of values for weeks and weights",
                               data=request.form)

    # Divide to cases
    if type(week_twin_1) == float:
        twin_1_percentage = [plot_gaussian(mcda, week_twin_1, weight_twin_1,
                                           join(folder_path, "gaussian_twin_1.png"),
                                           f"Week {week_twin_1}")]
    else:  # Week of twin 1 is a dataframe
        twin_1_percentage = []
        for i in range(week_twin_1.shape[0]):
            twin_1_percentage.append(plot_gaussian(mcda, float(week_twin_1.iloc[i].week), weight_twin_1.iloc[i].weight,
                                                   join(folder_path, f"gaussian_twin_1_{i}.png"),
                                                   f"Week {int(week_twin_1.iloc[i].week)}"))

        # Add trend line
        if week_twin_1.shape[0] > 1:
            plot_trend(mcda, week_twin_1, weight_twin_1, join(folder_path, "trend_line_twin_1.png"))

    # Do the same for twin 2
    if type(week_twin_2) == float:
        twin_2_percentage = [plot_gaussian(mcda, week_twin_2, weight_twin_2,
                                           join(folder_path, "gaussian_twin_2.png"),
                                           f"Week {week_twin_2}")]
    else:
        twin_2_percentage = []
        for i in range(week_twin_2.shape[0]):
            twin_2_percentage.append(plot_gaussian(mcda, float(week_twin_2.iloc[i].week), weight_twin_2.iloc[i].weight,
                                                   join(folder_path, f"gaussian_twin_2_{i}.png"),
                                                   f"Week {int(week_twin_2.iloc[i].week)}"))
        # Add trend line
        if week_twin_2.shape[0] > 1:
            plot_trend(mcda, week_twin_2, weight_twin_2, join(folder_path, "trend_line_twin_2.png"))

    # Get the files
    result_files = [join(folder_path, file) for file in os.listdir(folder_path) if ".png" in file]

    # Split into contents
    twin_1_trend = [file for file in result_files if "trend" in file and "twin_1" in file][0]
    twin_2_trend = [file for file in result_files if "trend" in file and "twin_2" in file][0]
    twin_1_gaussians = [file for file in result_files if "gaussian" in file and "twin_1" in file]
    twin_2_gaussians = [file for file in result_files if "gaussian" in file and "twin_2" in file]

    # Create df for percentage
    try:
        twin_1_percentage = pd.DataFrame({"Week": week_twin_1["week"], "Percentage": twin_1_percentage})
    except:
        twin_1_percentage = pd.DataFrame({"Week": [week_twin_1], "Percentage": twin_1_percentage})
    try:
        twin_2_percentage = pd.DataFrame({"Week": week_twin_2["week"], "Percentage": twin_2_percentage})
    except:
        twin_2_percentage = pd.DataFrame({"Week": [week_twin_2], "Percentage": twin_2_percentage})

    # Save as csv
    twin_1_percentage.to_csv(join(folder_path, "twin_1_percentage.csv"), index=False)
    twin_2_percentage.to_csv(join(folder_path, "twin_2_percentage.csv"), index=False)

    return render_template('index.html',  data=request.form, results=True,
                           twin_1_trend=twin_1_trend, twin_2_trend=twin_2_trend,
                           twin_1_gaussians=twin_1_gaussians, twin_2_gaussians=twin_2_gaussians,
                           twin_1_percentage=join(folder_path, "twin_1_percentage.csv"),
                           twin_2_percentage=join(folder_path, "twin_2_percentage.csv"))


@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    clean_old_files()
    return render_template("index.html", data={})


@app.route('/Example', methods=['GET'])
def example():
    return render_template("example.html")


@app.route('/About', methods=['GET'])
def about():
    return render_template("about.html")


if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
