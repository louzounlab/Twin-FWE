import datetime
import secrets
import os
from os.path import join
from flask import Flask, render_template, request, redirect, url_for
import time
import shutil
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
import gc
from scipy.stats import norm
import pickle

# Set the font
rcParams['font.family'] = 'Times New Roman'
rcParams['font.size'] = 25

# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()

df_original = pd.read_csv(join("static", "data.csv"))


def percentage_below_x(x, mean, std):
    # Calculate the z-score
    z = (x - mean) / std

    # Calculate the percentage using the CDF
    percentage = norm.cdf(z) * 100

    return percentage, z


def gaussian(x, mean, std):
    return 1 / (std * np.sqrt(2 * np.pi)) * np.exp(-(x - mean) ** 2 / (2 * std ** 2))


def plot_gaussian(mcda, week, weight1, weight2, save_path, title=""):
    # Get the values
    df = get_values(mcda, week)

    # Mean and standard deviation
    mean, std = df["50"], df["Std"]

    # Generate x values
    x = np.linspace(mean - 3 * std, mean + 3 * std, 100)

    # Compute the corresponding y values using the Gaussian function
    y = [gaussian(x_i, mean, std) for x_i in x]

    # Plot the Gaussian distribution
    fig, ax = plt.subplots(figsize=(15, 12), facecolor='none')
    ax.plot(x, y, color="darkturquoise", linewidth=4)
    ax.set_title(title)
    ax.set_xlabel("Weight")
    ax.set_ylabel("Probability Density")

    # Plot the percentiles bar
    x_values = [float(val) for val in list(df.iloc[0][['5', '10', '50', '90', '95']])]
    try:
        y_values = [gaussian(x_i, mean, std)[0] for x_i in x_values]
    except:
        y_values = [gaussian(x_i, mean, std).iloc[0] for x_i in x_values]

    width = 3 * std / 100
    ax.bar(x_values[2], y_values[2], color='black', width=width)
    ax.bar([x_values[1], x_values[3]], [y_values[1], y_values[3]], color='grey', width=width)
    ax.bar([x_values[0], x_values[4]], [y_values[0], y_values[4]], color='lightgrey', width=width)

    # Plot the weight as a point
    if weight1:
        ax.bar(weight1, gaussian(weight1, mean, std), color='dodgerblue', width=width)
        ax.scatter(weight1, gaussian(weight1, mean, std), color="dodgerblue", label="EFW1", s=400)
    if weight2:
        ax.bar(weight2, gaussian(weight2, mean, std), color='hotpink', width=width)
        ax.scatter(weight2, gaussian(weight2, mean, std), color="hotpink", label="EFW2", s=400)
    ax.legend()

    plt.savefig(save_path)

    # Calculate the percentage below the weight
    percentage1, percentage2 = [None], [None]
    z_score_1, z_score_2 = [None], [None]
    if weight1:
        percentage1, z_score_1 = percentage_below_x(weight1, mean, std)
    if weight2:
        percentage2, z_score_2 = percentage_below_x(weight2, mean, std)

    return percentage1[0], percentage2[0], z_score_1[0], z_score_2[0]


def plot_trend(mcda, week, week1, week2, weight1, weight2, save_path, title="Trend Line", extend_by=1):
    # Find the row of details for each week
    dfs = []

    # Change the week and weight to list format
    try:
        week, weight1, weight2 = list(week["week"]), list(weight1["weight"]), list(weight2["weight"])
    except:
        week, weight1, weight2 = list(week["week"]), weight1, weight2

    week = [max(12, min(week) - extend_by)] + week + [min(36.5, max(week) + extend_by)]

    for w in week:
        df_w = get_values(mcda=mcda, week=w)
        dfs.append(df_w)
    # Concatenate the dataframes
    df = pd.concat(dfs)

    # Set colors
    colors = ["lightgrey", "grey", "black", "grey", "lightgrey"]

    # Set the percentage values
    pers = ['5', '10', '50', '90', '95']

    # Set the figure
    fig, ax = plt.subplots(figsize=(15, 12), facecolor='none')

    # Plot the trend lines
    for i in range(len(colors)):
        ax.plot(week, df[pers[i]], color=colors[i], label=f"{pers[i]}%", linewidth=2)

    # Fill the gap between 5% and 95% with lightgrey
    ax.fill_between(week, df['5'], df['95'], color='lightgrey', alpha=0.5)

    # Fill the gap between 10% and 90% with grey
    ax.fill_between(week, df['10'], df['90'], color='grey', alpha=0.5)

    # Plot the weight
    ax.plot(week1, weight1, color="dodgerblue", label="EFW1", linewidth=4)
    ax.plot(week2, weight2, color='hotpink', label="EFW2", linewidth=4)
    ax.scatter(week1, weight1, color="dodgerblue", s=6 * rcParams['lines.markersize'] ** 2)
    ax.scatter(week2, weight2, color='hotpink', s=6 * rcParams['lines.markersize'] ** 2)

    # Set the labels
    ax.set_title(title)
    ax.set_xlabel("Week")
    ax.set_ylabel("Weight")
    ax.legend()

    # Save the figure
    plt.savefig(save_path)


def get_values(mcda: int, week: float):
    global df_original
    df = df_original.copy()

    # Narrow down the data
    if mcda == 1:
        df = df[df["MCDA"] == 1]
    else:
        df = df[df["MCDA"] == 0]
    # Get the week
    if week in list(df["Week"]):
        df = df[df["Week"] == week]
    else:
        weeks = list(df["Week"])
        week_below = max([w for w in weeks if w < week])
        week_above = min([w for w in weeks if w > week])

        # Now, week is an average of week_below and week_above
        # and can be represented as a*week_below + b*week_above
        a = (week_above - week) / (week_above - week_below)
        b = (week - week_below) / (week_above - week_below)

        df = a * df[df["Week"] == week_below].to_numpy() + b * df[df["Week"] == week_above].to_numpy()
        df = pd.DataFrame(df, columns=df_original.columns)

    return df


def clean_old_files():
    gc.collect()
    files = os.listdir("static")
    for file in files:
        if os.path.isdir(join("static", file)) and file != "bootstrap":
            # Time is older than an hour
            if time.time() - float(file) > 3600:
                shutil.rmtree(join("static", file))
                print("Deleted:", file)


@app.route('/process_form', methods=['POST', 'GET'])
def process_form():
    clean_old_files()

    data = request.form

    index_of_last_row = int(data.get('last_row', default=4))

    # Read the form data
    cda_type = data.get('cda_type')
    if cda_type == "None":
        return render_template("index.html", error="Please select a MCDA/DCDA", data=data,
                               percentage_dict={},
                               zscore_dict={}, last_row=index_of_last_row, discordance_index={})

    # Set the value of MCDA
    mcda = 1 if cda_type == "MCDA" else 0

    # Get request time
    request_time = str(time.time())
    folder_path = join("static", request_time)
    # Create a folder of this time
    os.mkdir(folder_path)

    # Read the weeks from the form
    weeks_list = []
    for i in range(1, 10 + 1):
        weeki = data.get(f'week{i}')
        if weeki:
            weeki = int(weeki)
        else:
            continue
        dayi = data.get(f'Day{i}')
        if dayi:
            dayi = int(dayi)
            if weeki == 36:
                dayi = min(dayi, 3)
            weeki += dayi / 7
        weeks_list.append(weeki)

    # Set up nicely in a dataframe
    week_df = pd.DataFrame({"week": weeks_list})

    # Check there was an input
    if week_df.shape[0] == 0:
        return render_template("index.html",
                               error="Please input at least one week.",
                               data=data,
                               percentage_dict={},
                               zscore_dict={}, last_row=index_of_last_row, discordance_index={})

    # Read the weeks from the form
    weights_list = [[], []]
    for j in range(0, 1 + 1):
        for i in range(1, 10 + 1):
            weightj_i = data.get(f'EFW{j + 1}_{i}')
            if weightj_i:
                weights_list[j].append(float(weightj_i))
            else:
                weights_list[j].append(np.nan)

    # Set up nicely in a dataframe
    weight_df_twin_1 = pd.DataFrame({"weight": weights_list[0]})
    weight_df_twin_2 = pd.DataFrame({"weight": weights_list[1]})

    # Calculate discordance index
    discordance_index = {}
    indexes_1, indexes_2 = weight_df_twin_1.isna(), weight_df_twin_2.isna()
    for i in range(len(weeks_list)):
        weight1, weight2 = None, None
        if not indexes_1.iloc[i]["weight"]:
            weight1 = weight_df_twin_1.iloc[i]["weight"]
        if not indexes_1.iloc[i]["weight"]:
            weight2 = weight_df_twin_2.iloc[i]["weight"]
        if weight1 and weight2:
            discordance_index[i+1] = f"{100 * abs(weight1 - weight2) / max(weight1, weight2):.2f}%"

    # Check insertion
    if weight_df_twin_1.shape[0] == 0:
        return render_template("index.html",
                               error="Please input at least one weight for twin 1.",
                               percentage_dict={},
                               data=data, zscore_dict={}, last_row=index_of_last_row, discordance_index={})
    if weight_df_twin_2.shape[0] == 0:
        return render_template("index.html",
                               error="Please input at least one weight for twin 2.",
                               percentage_dict={},
                               data=data, zscore_dict={}, last_row=index_of_last_row, discordance_index={})

    week_twin_1, week_twin_2 = week_df[~weight_df_twin_1["weight"].isna()], week_df[~weight_df_twin_2["weight"].isna()]
    weight_df_twin_1.dropna(inplace=True)
    weight_df_twin_2.dropna(inplace=True)

    twin_1_percentage, twin_2_percentage = [], []
    twin_1_z_score, twin_2_z_score = [], []
    for i in range(week_df.shape[0]):
        week = week_df.iloc[i].week
        weight1, weight2 = None, None
        if week in list(week_twin_2["week"]):
            try:
                weight2 = weight_df_twin_2[week_twin_2["week"] == week].iloc[0].weight
            except:
                return render_template("index.html",
                                       error="Please input the weeks by the order.",
                                       percentage_dict={},
                                       data=data, zscore_dict={}, last_row=index_of_last_row, discordance_index={})
        if week in list(week_twin_1["week"]):
            weight1 = weight_df_twin_1[week_twin_1["week"] == week].iloc[0].weight
        percentage1, percentage2, z_score1, z_score2 = plot_gaussian(mcda=mcda, week=week,
                                                                     weight1=weight1, weight2=weight2,
                                                                     save_path=join(folder_path,
                                                                                    f"gaussian_{week}.png"),
                                                                     title=f"Week {week}")
        if percentage1:
            twin_1_percentage.append(percentage1)
            twin_1_z_score.append(z_score1)
        if percentage2:
            twin_2_percentage.append(percentage2)
            twin_2_z_score.append(z_score2)

    # Add trend line
    plot_trend(mcda=mcda, week=week_df, week1=list(week_twin_1["week"]), week2=list(week_twin_2["week"]),
               weight1=weight_df_twin_1, weight2=weight_df_twin_2, save_path=join(folder_path, "trend_line.png"))

    # Get the files
    gaussian_files = [join(folder_path, file) for file in os.listdir(folder_path) if "gaussian" in file]

    # Create df for percentage
    week1, week2 = list(week_twin_1["week"]), list(week_twin_2["week"])
    percentage_df = pd.DataFrame({"Week": [], "Twin 1": [], "Twin 2": []})
    zscore_df = pd.DataFrame({"Week": [], "Twin 1": [], "Twin 2": []})
    i, j = 0, 0
    for k, week in enumerate(week_df["week"]):
        per1, per2 = np.nan, np.nan
        z1, z2 = np.nan, np.nan
        try:
            if week == week1[i]:
                per1 = twin_1_percentage[i]
                z1 = twin_1_z_score[i]
                i += 1
        except:
            pass
        try:
            if week == week2[j]:
                per2 = twin_2_percentage[j]
                z2 = twin_2_z_score[j]
                j += 1
        except:
            pass
        percentage_df.loc[k] = [week, per1, per2]
        zscore_df.loc[k] = [week, z1, z2]

    # Save as csv
    percentage_df.to_csv(join(folder_path, "percentages.csv"), index=False)
    zscore_df.to_csv(join(folder_path, "zscores.csv"), index=False)

    percentage_dict = {}
    zscore_dict = {}
    for j in range(1, 2 + 1):
        for i in range(1, 11):
            # For percentages
            try:
                val = str(percentage_df[f"Twin {j}"].iloc[i - 1])
                val = val if val != "nan" else ""
            except:
                val = ""
            if val:
                val = f"{float(val):.2f}%"
            percentage_dict[f"per{j}_{i}"] = val
            # For z-scores
            try:
                val = str(zscore_df[f"Twin {j}"].iloc[i - 1])
                val = val if val != "nan" else ""
            except:
                val = ""
            if val:
                val = f"{float(val):.3f}"
            zscore_dict[f"z{j}_{i}"] = val

    # Save the trend data
    trend_data = {"mcda": mcda, "week": week_df, "week1": list(week_twin_1["week"]),
                  "week2": list(week_twin_2["week"]), "weight1": list(weight_df_twin_1["weight"]),
                  "weight2": list(weight_df_twin_2["weight"]), "save_path": join(folder_path, "trend_line.png"),
                  "data": data, "trend_line": join(folder_path, "trend_line.png"), "gaussians": gaussian_files,
                  "percentages_df": join(folder_path, "percentages.csv"),
                  "zscores_df": join(folder_path, "zscores.csv"),
                  "trend_data_path": join(folder_path, "trend_data.pkl"),
                  "percentage_dict": percentage_dict,
                  "zscore_dict": zscore_dict,
                  "discordance_index": discordance_index}
    with open(join(folder_path, "trend_data.pkl"), "wb") as file:
        pickle.dump(trend_data, file)

    return render_template('index.html', data=data, results=True,
                           trend_line=join(folder_path, "trend_line.png"),
                           gaussians=gaussian_files,
                           percentages_df=join(folder_path, "percentages.csv"),
                           zscore_df=join(folder_path, "zscores.csv"),
                           trend_data=join(folder_path, "trend_data.pkl"),
                           extended_by=1, percentage_dict=percentage_dict, zscore_dict=zscore_dict,
                           last_row=index_of_last_row, discordance_index=discordance_index)


@app.route("/adjust_trend", methods=['POST', 'GET'])
def adjust_trend():
    # Read the form data
    trend_data = request.form.get("trend_data")
    trend_data = pickle.load(open(trend_data, "rb"))
    extended_by = request.form.get("range")
    index_of_last_row = int(request.form.get('last_row', default=4))
    if not extended_by:
        extended_by = 1
    else:
        extended_by = int(extended_by)

    # Extract all the data needed
    plot_trend(mcda=trend_data["mcda"], week=trend_data["week"], week1=trend_data["week1"], week2=trend_data["week2"],
               weight1=trend_data["weight1"], weight2=trend_data["weight2"], save_path=trend_data["save_path"],
               extend_by=extended_by)

    return render_template('index.html',
                           data=trend_data["data"],
                           results=True,
                           trend_line=trend_data["save_path"],
                           gaussians=trend_data["gaussians"],
                           percentages_df=trend_data["percentages_df"],
                           zscore_df=trend_data["zscores_df"],
                           trend_data=trend_data["trend_data_path"],
                           extended_by=extended_by,
                           percentage_dict=trend_data["percentage_dict"],
                           zscore_dict=trend_data["zscore_dict"], last_row=index_of_last_row,
                           discordance_index=trend_data["discordance_index"])


@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    clean_old_files()
    return render_template("index.html", data={}, percentage_dict={}, zscore_dict={}, last_row=4)


@app.route('/Example', methods=['GET'])
def example():
    return render_template("example.html")


@app.route('/About', methods=['GET'])
def about():
    return render_template("about.html")


if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
